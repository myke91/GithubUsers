// Generated by Dagger (https://dagger.dev).
package com.myke.sharecare.feature.user.di;

import com.myke.sharecare.feature.user.data.GithubUserRepository;
import com.myke.sharecare.feature.user.data.source.GithubUserDatasource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GithubUserModule_GithubUsersRepositoryFactory implements Factory<GithubUserRepository> {
  private final GithubUserModule module;

  private final Provider<GithubUserDatasource> datasourceProvider;

  public GithubUserModule_GithubUsersRepositoryFactory(GithubUserModule module,
      Provider<GithubUserDatasource> datasourceProvider) {
    this.module = module;
    this.datasourceProvider = datasourceProvider;
  }

  @Override
  public GithubUserRepository get() {
    return githubUsersRepository(module, datasourceProvider.get());
  }

  public static GithubUserModule_GithubUsersRepositoryFactory create(GithubUserModule module,
      Provider<GithubUserDatasource> datasourceProvider) {
    return new GithubUserModule_GithubUsersRepositoryFactory(module, datasourceProvider);
  }

  public static GithubUserRepository githubUsersRepository(GithubUserModule instance,
      GithubUserDatasource datasource) {
    return Preconditions.checkNotNullFromProvides(instance.githubUsersRepository(datasource));
  }
}
