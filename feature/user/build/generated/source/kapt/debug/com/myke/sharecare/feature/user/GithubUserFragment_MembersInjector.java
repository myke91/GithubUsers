// Generated by Dagger (https://dagger.dev).
package com.myke.sharecare.feature.user;

import com.myke.sharecare.feature.user.viewmodel.GithubUserViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GithubUserFragment_MembersInjector implements MembersInjector<GithubUserFragment> {
  private final Provider<GithubUserViewModelFactory> viewModelFactoryProvider;

  public GithubUserFragment_MembersInjector(
      Provider<GithubUserViewModelFactory> viewModelFactoryProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<GithubUserFragment> create(
      Provider<GithubUserViewModelFactory> viewModelFactoryProvider) {
    return new GithubUserFragment_MembersInjector(viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(GithubUserFragment instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.myke.sharecare.feature.user.GithubUserFragment.viewModelFactory")
  public static void injectViewModelFactory(GithubUserFragment instance,
      GithubUserViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
